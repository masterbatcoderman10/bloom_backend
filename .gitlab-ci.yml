# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# DATABASES = {

#     'default': {

#         'ENGINE': 'django.db.backends.postgresql_psycopg2',

#         'NAME': 'defaultdb',

#         'USER': 'doadmin',

#         'PASSWORD': 'yrByQ4lRvFGolaKE',

#         'HOST': 'db-postgresql-teamprojectai50-do-user-10933426-0.b.db.ondigitalocean.com',

#         'PORT': '25060',

#     }

# }

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

default:
  image: python

# before_script:
#   - apt -y update && apt install -y gcc
#   - apt -y install apt-utils
#   - apt-get install -y postgresql postgresql-client libpq-dev
#   - apt -y upgrade
#   - pip install --upgrade pip wheel  
#   - pip install -r backend/requirements.txt
#   - pip install django-cors-headers

services:
  - postgres


variables:
    # Configure postgres service (https://hub.docker.com/_/postgres/)
  POSTGRES_DB: defaultdb
  POSTGRES_USER: doadmin
  POSTGRES_PASSWORD: yrByQ4lRvFGolaKE


stages:          # List of stages for jobs, and their order of execution
  - test
  - deploy
    

# build-job:       # This job runs in the build stage, which runs first.
#   stage: build
#   tags:
#     - ruby
#   script:
#     - cd backend
#     - python manage.py makemigrations 
#     - python manage.py migrate 
#     - python manage.py collectstatic --noinput
#   artifacts:
#     paths: 
#       - backend/
#     exclude:
#       - .git
      
        
    
      

test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  tags:
    - ruby
  script:
    - cd backend
    - echo "Running unit tests... This will take about 60 seconds."
    #- sleep 6
    - python manage.py makemigrations 
    - python manage.py migrate 
    - python manage.py test
  artifacts:
    paths: 
      - backend/
    exclude:
      - .git


system-test: 
  image: node  # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  tags:
    - ruby
  script:
    - cd front-end/bloom_website
    - npm install
    - npm test
    #- sleep 6    
  artifacts:
    paths: 
      - front-end/bloom_website
    exclude:
      - .git


deploy-django:
  image: ruby
  stage: deploy
  tags:
    - ruby
  before_script:
    - gem install dpl
    #- wget -qO- https://cli-assets.heroku.com/install-ubuntu.sh | sh
    
  script:
    - cd backend
    - dpl --provider=heroku --app=$HEROKU_APP_NAME --api-key=$HEROKU_API_KEY
    #- export HEROKU_API_KEY=$HEROKU_API_KEY
    #- heroku run --app $HEROKU_APPNAME migrate
  environment:
    name: main
    url: $HEROKU_APP_HOST

  

deploy-react:
  image: node
  stage: deploy
  tags:
    - ruby
  before_script:
    - apt-get update -qq
    - apt-get install -qq git
    - "which ssh-agent || ( apt-get install -qq openssh-client )"
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  environment:
    name: production
    url: bloom.bham.team
  script:
    - cd front-end/bloom_website/
    - bash deploy.sh
  only:
    - main






