# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# DATABASES = {

#     'default': {

#         'ENGINE': 'django.db.backends.postgresql_psycopg2',

#         'NAME': 'defaultdb',

#         'USER': 'doadmin',

#         'PASSWORD': 'yrByQ4lRvFGolaKE',

#         'HOST': 'db-postgresql-teamprojectai50-do-user-10933426-0.b.db.ondigitalocean.com',

#         'PORT': '25060',

#     }

# }

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

default:
  image: python

before_script:
  - apt -y update && apt install -y gcc
  - apt -y install apt-utils
    
  - apt-get install -y postgresql postgresql-client libpq-dev
  - apt -y upgrade
  - pip install --upgrade pip wheel
    
    
  - pip install -r backend/requirements.txt
  - pip install django-cors-headers

services:
  - postgres


variables:
    # Configure postgres service (https://hub.docker.com/_/postgres/)
  POSTGRES_DB: defaultdb
  POSTGRES_USER: doadmin
  POSTGRES_PASSWORD: yrByQ4lRvFGolaKE


stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy
    

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - cd backend
    - python manage.py makemigrations 
    - python manage.py migrate 
    - python manage.py collectstatic --noinput
  artifacts:
    paths: 
      - backend/
    exclude:
      - .git
      
        
    
      

test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - cd backend
    - echo "Running unit tests... This will take about 60 seconds."
    #- sleep 6
    #- python manage.py test


deploy-django:
  image: ruby
  stage: deploy
  before_script:
    - gem install dpl
    - sudo apt-get install python-tk python3-tk tk-dev
    
  script:
    - cd backend
    - dpl --provider=heroku --app=$HEROKU_APP_NAME --api-key=$HEROKU_API_KEY
  environment:
    name: main
    url: $HEROKU_APP_HOST






